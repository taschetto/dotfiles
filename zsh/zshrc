# Random stuff
export EDITOR='vim'
export TERM=xterm-256color
export GOPATH=$HOME/Projects/go
export SSH_KEY_PATH="~/.ssh/rsa_id"

# Aliases
alias open="xdg-open"
alias ips="ip -s -c -h a"
alias gpo="git push origin"
alias dc="docker-compose"
alias gun=""
alias lsd="ls -ltr"

# Open new tab in current directory
[[ -f /etc/profile.d/vte.sh ]] && . /etc/profile.d/vte.sh

# Custom PATH
export PATH="/usr/local/heroku/bin:$PATH"
export PATH=$HOME/.npm-global/bin:$PATH
export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=/opt/cmake/bin:$PATH
export PATH=$HOME/.rbenv/bin:$PATH
export PATH=$HOME/.rbenv/plugins/ruby-build/bin:$PATH
export PATH=$HOME/.npm-global/bin:$PATH
export PATH=$HOME/.config/yarn/global/node_modules/.bin:$PATH

# rbenv
if [ -d $HOME/.rbenv/bin ] ; then
  eval "$(rbenv init -)"
fi

# zsh / oh-my-zsh
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME=""
ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="dd/mm/yyyy"

plugins=(bundler common-aliases git github rails rake-fast sublime sudo zsh-syntax-highlighting zsh-better-npm-completion yarn-autocompletions)

source $ZSH/oh-my-zsh.sh

# pure-prompt
fpath+=$HOME/.zsh/pure
autoload -U promptinit; promptinit
prompt pure

autoload -U compinit
compinit -i

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# tatango aws
#Get ips of instances by name

function awip {
    aws ec2 describe-instances --filters "Name=tag:Name,Values=$1"  --query 'Reservations[].Instances[].PrivateIpAddress' --output json | jq -r '.[]'
}     

function awssh {
    ssh `awip $1 | head -n 1`
}      

function awrefresh {
    awip $1 | while read -r line; do
        ssh -n $line "sudo reboot"
        sleep 3m
    done
}
function awcount {                                                                                                                                                                          
    aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].[InstanceId]' --output text | wc -l
}
function awlist {
    aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].[InstanceId,PrivateIpAddress,Tags[?Key==`Name`]| [0].Value]' --output table
}
function awsearch {
    aws ec2 describe-instances --filters "Name=tag:Name,Values=*$1*" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].[InstanceId,PrivateIpAddress,Tags[?Key==`Name`]| [0].Value]' --output table
}

