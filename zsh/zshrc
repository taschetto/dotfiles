# Random stuff
export EDITOR='vim'
export TERM=xterm-256color
export GOPATH=$HOME/Projects/go
export SSH_KEY_PATH="~/.ssh/rsa_id"

# Aliases
alias open="xdg-open"
alias ips="ip -s -c -h a"
alias gpo="git push origin"
alias dc="docker-compose"
alias gun=""
alias lsd="ls -ltr"

# Open new tab in current directory
[[ -f /etc/profile.d/vte.sh ]] && . /etc/profile.d/vte.sh

# Custom PATH
export PATH="/usr/local/heroku/bin:$PATH"
export PATH=$HOME/.npm-global/bin:$PATH
export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=/opt/cmake/bin:$PATH
export PATH=$HOME/.rbenv/bin:$PATH
export PATH=$HOME/.rbenv/plugins/ruby-build/bin:$PATH
export PATH=$HOME/.npm-global/bin:$PATH
export PATH=$HOME/.config/yarn/global/node_modules/.bin:$PATH
export PATH="$(yarn global bin):$PATH"
export PATH=$HOME/.pyenv/bin:$PATH
# rbenv
if [ -d $HOME/.rbenv/bin ] ; then
  eval "$(rbenv init -)"
fi

# zsh / oh-my-zsh
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME=""
ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="dd/mm/yyyy"

plugins=(bundler common-aliases git github rails rake-fast sublime sudo zsh-syntax-highlighting zsh-better-npm-completion yarn-autocompletions docker docker-compose gh)

source $ZSH/oh-my-zsh.sh

# pure-prompt
fpath+=$HOME/.zsh/pure
autoload -U promptinit; promptinit
prompt pure

autoload -U compinit
compinit -i

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# tatango aws
#Get ips of instances by name

function awip {
    aws ec2 describe-instances --filters "Name=tag:Name,Values=$1"  --query 'Reservations[].Instances[].PrivateIpAddress' --output json | jq -r '.[]'
}

function awssh {
    ssh `awip $1 | head -n 1`
}

function awrefresh {
    awip $1 | while read -r line; do
        ssh -n $line "sudo reboot"
        sleep 3m
    done
}
function awcount {
    aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].[InstanceId]' --output text | wc -l
}
function awlist {
    aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].[InstanceId,PrivateIpAddress,Tags[?Key==`Name`]| [0].Value]' --output table
}
function awsearch {
    aws ec2 describe-instances --filters "Name=tag:Name,Values=*$1*" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].[InstanceId,PrivateIpAddress,Tags[?Key==`Name`]| [0].Value]' --output table
}

function awssh-all() {
    for ip in $(awip $1); do
      echo ssh $ip
      ssh $ip "$2"
    done
}

function awssh-gone-wild() {
  read "REPLY?Using wildcard search for *$1*. Are you sure you don't mean awssh-all? "
  echo    # (optional) move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
    return 1
  fi
  for ip in $(aws ec2 describe-instances --filters "Name=tag:Name,Values=*$1*"  --query 'Reservations[].Instances[].PrivateIpAddress' --output json | jq -r '.[]'); do
    echo ssh $ip
    ssh $ip "$2"
  done
}

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

alias awslocal="aws --endpoint-url http://localhost:4566"

export PYTHON_BUILD_ARIA2_OPTS="-x 10 -k 1M"

eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

unalias dcr
alias dcr='dc run --rm'
alias drs='dcr tatango-web bundle exec rspec'

# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  [[ -a .nvmrc ]] || return

  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc
###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    if ! IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)); then
      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    if ! IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)); then

      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###
