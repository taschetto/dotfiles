# Random stuff
export EDITOR='vim'
export TERM=xterm-256color
export SSH_KEY_PATH="~/.ssh/rsa_id"

# Extend $PATH without duplicates
_extend_path() {
  [[ -d "$1" ]] || return

  if ! $(echo "$PATH" | tr ":" "\n" | grep -qx "$1"); then
    export PATH="$1:$PATH"
  fi
}

# Default pager
export PAGER='less'

# less options
less_opts=(
  # Quit if entire file fits on first screen.
  -FX
  # Ignore case in searches that do not contain uppercase.
  --ignore-case
  # Allow ANSI colour escapes, but no other escapes.
  --RAW-CONTROL-CHARS
  # Quiet the terminal bell. (when trying to scroll past the end of the buffer)
  --quiet
  # Do not complain when we are on a dumb terminal.
  --dumb
)
export LESS="${less_opts[*]}"

# Add custom bin to $PATH
_extend_path "/opt/cmake/bin"
_extend_path "/opt/homebrew/opt/libpq/bin"
_extend_path "/usr/local/bin"
_extend_path "/usr/local/heroku/bin"
_extend_path "/usr/local/opt/libpq/bin"
_extend_path "$HOME/.config/yarn/global/node_modules/.bin"
_extend_path "$HOME/.npm-global/bin"
_extend_path "$HOME/.pyenv/bin"
_extend_path "$HOME/bin"
_extend_path "$HOME/Library/Python/3.9/bin"

# begin docker utilities
function dc() {
  if [[ $(uname -m) == "arm64" && -f "docker-compose.override.apple-silicon.yml" ]]; then
    docker-compose -f docker-compose.yml -f docker-compose.override.apple-silicon.yml "$@"
  else
    docker-compose "$@"
  fi
}

alias dcr='dc run --rm'
alias drs='dcr tatango-web bundle exec rspec'
# end docker utilities

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

load-nvmrc() {
  [[ -e .nvmrc ]] || return

  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

eval "$(pyenv init --path)"
eval "$(rbenv init - zsh)"

function load-aws-profile {
  local dir="$PWD"
  local found=0
  local new_profile
  local new_region

  while [[ -n "$dir" && $found -eq 0 ]]; do
    if [[ -f "$dir/.awsprofile" ]]; then
      new_profile=$(cat "$dir/.awsprofile")
      new_region=$(aws configure get region --profile $new_profile)
      if [[ "$AWS_PROFILE" != "$new_profile" ]]; then
        export AWS_PROFILE=$new_profile
        export AWS_REGION=$new_region
        echo "Found '$dir/.awsprofile' with profile <$new_profile>"
        echo "Now using AWS profile $AWS_PROFILE (region $AWS_REGION)"
      fi
      found=1
    else
      if [[ "$dir" == "/" ]]; then
        break
      else
        dir=$(dirname "$dir")
      fi
    fi
  done

  if [[ $found -eq 0 && -n "$AWS_PROFILE" ]]; then
    unset AWS_PROFILE
    unset AWS_REGION
  fi
}

autoload -Uz compinit
compinit

autoload -U add-zsh-hook

add-zsh-hook chpwd load-nvmrc
add-zsh-hook chpwd load-aws-profile

load-nvmrc
load-aws-profile

source /opt/homebrew/opt/spaceship/spaceship.zsh

source $(brew --prefix)/opt/antidote/share/antidote/antidote.zsh
antidote load

ZSH_PLUGINS_FILE="${HOME}/.zsh_plugins.txt"
ZSH_PLUGINS_COMPILED="${HOME}/.zsh_plugins.zsh"

if [[ ! -f $ZSH_PLUGINS_COMPILED || $ZSH_PLUGINS_FILE -nt $ZSH_PLUGINS_COMPILED ]]; then
  antidote bundle <$ZSH_PLUGINS_FILE >$ZSH_PLUGINS_COMPILED
fi

source $ZSH_PLUGINS_COMPILED

[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
